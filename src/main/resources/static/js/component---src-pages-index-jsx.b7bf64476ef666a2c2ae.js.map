{"version":3,"sources":["webpack://books/./src/components/auth/useAuth.js","webpack://books/./src/pages/index.jsx"],"names":["useSelector","state","auth","status","user","token","loginRequest","dispatch","useDispatch","isUnknown","isAuthenticated","isAnonymous","login","useCallback","credentials","loginAction","logout","authService","logoutAction","authenticate","session","authenticateAction","error","clearLoginRequest","clearLoginRequestAction","useEffect","useAuth","navigate","routes"],"mappings":"8IAgFA,IAnEgB,WAAO,IAAD,GAC0BA,SAC5C,SAACC,GAAD,OAAWA,EAAMC,QADXC,EADY,EACZA,OAAQC,EADI,EACJA,KAAMC,EADF,EACEA,MAAOC,EADT,EACSA,aAGvBC,GAAWC,UAETC,EAA4CN,EAA5CM,UAAWC,EAAiCP,EAAjCO,gBAAiBC,EAAgBR,EAAhBQ,YAO9BC,GAAQC,kBACZ,SAACC,GAAD,OAAiBP,GAASQ,QAAYD,MACtC,CAACP,IAMGS,GAASH,kBAAY,WACzBI,aACAV,GAASW,aACR,CAACX,IAKEY,GAAeN,kBAAY,WAC/B,IACE,IAAMO,EAAUH,mBAChBV,GAASc,QAAmBD,IAC5B,MAAOE,GACPf,GAASW,cAEV,CAACX,IAKEgB,GAAoBV,kBACxB,kBAAMN,GAASiB,aACf,CAACjB,IAUH,OAJAkB,gBAAU,WACJhB,GAAWU,MACd,CAACV,EAAWU,IAER,CACLV,YACAC,kBACAC,cACAP,OACAC,QACAC,eACAM,QACAI,SACAG,eACAI,uB,2EC5DJ,UAZkB,WAAO,IAAD,GACmBG,SAAjChB,EADc,EACdA,gBAAiBC,EADH,EACGA,YAEzB,GAAID,GACFiB,QAASC,UACJ,KAAIjB,EAEJ,MAAO,cADZgB,QAASC,MAGX,OAAO,O","file":"component---src-pages-index-jsx.b7bf64476ef666a2c2ae.js","sourcesContent":["import { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport authService from \"../../services/authService\";\nimport {\n  authenticate as authenticateAction,\n  clearLoginRequest as clearLoginRequestAction,\n  login as loginAction,\n  logout as logoutAction,\n} from \"./slice\";\n\n/**\n * Hook that provides methods to manage the user authentication.\n */\nconst useAuth = () => {\n  const { status, user, token, loginRequest } = useSelector(\n    (state) => state.auth\n  );\n  const dispatch = useDispatch();\n\n  const { isUnknown, isAuthenticated, isAnonymous } = status;\n\n  /**\n   * Authenticates an user.\n   *\n   * @param {object} credentials - The user credentials.\n   */\n  const login = useCallback(\n    (credentials) => dispatch(loginAction(credentials)),\n    [dispatch]\n  );\n\n  /**\n   * Invalidates the current authentication.\n   */\n  const logout = useCallback(() => {\n    authService.logout();\n    dispatch(logoutAction());\n  }, [dispatch]);\n\n  /**\n   * Authenticates the user from localStorage session.\n   */\n  const authenticate = useCallback(() => {\n    try {\n      const session = authService.authenticate();\n      dispatch(authenticateAction(session));\n    } catch (error) {\n      dispatch(logoutAction());\n    }\n  }, [dispatch]);\n\n  /**\n   * Authenticates the user from localStorage session.\n   */\n  const clearLoginRequest = useCallback(\n    () => dispatch(clearLoginRequestAction()),\n    [dispatch]\n  );\n\n  /**\n   * Try to authenticate the user if status is unknown.\n   */\n  useEffect(() => {\n    if (isUnknown) authenticate();\n  }, [isUnknown, authenticate]);\n\n  return {\n    isUnknown,\n    isAuthenticated,\n    isAnonymous,\n    user,\n    token,\n    loginRequest,\n    login,\n    logout,\n    authenticate,\n    clearLoginRequest,\n  };\n};\n\nexport default useAuth;\n","import { navigate } from \"gatsby\";\nimport useAuth from \"../components/auth/useAuth\";\nimport routes from \"../settings/routes\";\n\nconst IndexPage = () => {\n  const { isAuthenticated, isAnonymous } = useAuth();\n\n  if (isAuthenticated) {\n    navigate(routes.home);\n  } else if (isAnonymous) {\n    navigate(routes.login);\n  } else return \"Loading...\";\n\n  return null;\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}