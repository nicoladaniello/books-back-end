{"version":3,"sources":["webpack://books/./src/components/common/SearchByButton.jsx","webpack://books/./src/components/common/modal/ConfirmationModal.jsx","webpack://books/./src/components/payments/DeletePaymentModal.jsx","webpack://books/./src/components/payments/SearchByInvoiceModal.jsx","webpack://books/./src/components/payments/SearchByPeriodModal.jsx","webpack://books/./src/components/payments/SearchBySupplierModal.jsx","webpack://books/./src/pages/payments.jsx"],"names":["input","onClick","children","variant","className","classnames","isOpen","onConfirm","onDismiss","onClose","modal","DeletePaymentModal","state","useSelector","payments","modals","dispatch","useDispatch","props","payment","handleConfirm","remove","result","unwrapResult","closeModal","alert","console","error","ConfirmationModal","description","Option","data","supplierName","c","SearchByInvoiceModal","useState","invoice","setInvoice","setSearchParams","supplier","undefined","loadEntities","loadOptions","inputValue","callback","apiService","_embedded","invoices","Autocomplete","components","getOptionLabel","getOptionValue","id","value","onChange","Button","type","SearchByPeriodModal","period","setPeriod","name","periods","SearchBySupplierModal","setSupplier","suppliers","useEffect","actions","label","Icon","icon","openModal","UpsertPaymentModal","View","privateRoute","style","overflowY","SearchByButton","search","Table","schema","ids","entities","page","isLoading","Pagination","onLoadMore","loadMore"],"mappings":"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","file":"component---src-pages-payments-jsx.4748145837263f8dd06c.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport classnames from \"classnames\";\n\nconst SearchByButton = ({ input, onClick, children }) => (\n  <Button\n    variant={input ? \"primary-light\" : \"light\"}\n    className={classnames([\"mr-2\", { \"no-print\": !input }])}\n    onClick={() => onClick()}\n  >\n    {children}\n  </Button>\n);\n\nexport default SearchByButton;\n","import React from \"react\";\nimport { Button, Modal as BSModal } from \"react-bootstrap\";\nimport Modal from \".\";\n\nconst ConfirmationModal = ({ isOpen, onConfirm, onDismiss, children }) => (\n  <Modal isOpen={isOpen} onClose={onDismiss}>\n    <BSModal.Body>{children}</BSModal.Body>\n    <BSModal.Footer>\n      <Button variant=\"light\" onClick={() => onDismiss()}>\n        Annulla\n      </Button>\n      <Button variant=\"primary\" onClick={() => onConfirm()}>\n        Conferma\n      </Button>\n    </BSModal.Footer>\n  </Modal>\n);\n\nexport default ConfirmationModal;\n","import { unwrapResult } from \"@reduxjs/toolkit\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ConfirmationModal from \"../common/modal/ConfirmationModal\";\nimport { remove } from \"./actions\";\nimport { closeModal } from \"./slice\";\n\nconst modal = \"DeletePaymentModal\";\n\nconst DeletePaymentModal = () => {\n  const state = useSelector((state) => state.payments.modals[modal]);\n  const dispatch = useDispatch();\n\n  const { isOpen, props: { payment } = {} } = state || {};\n\n  // Update result and close the modal.\n  const handleConfirm = async () => {\n    try {\n      const result = await dispatch(remove(payment));\n      unwrapResult(result);\n      dispatch(closeModal(modal));\n    } catch (error) {\n      alert(\"Errore durante l'eliminazione del pagamento.\");\n      console.error(\"An error occurred while deleting the payment.\", error);\n    }\n  };\n\n  return (\n    <ConfirmationModal\n      isOpen={isOpen}\n      onConfirm={handleConfirm}\n      onDismiss={() => dispatch(closeModal(modal))}\n    >\n      Sei sicuro di voler eliminare il pagamento \"{payment?.description}\"?\n    </ConfirmationModal>\n  );\n};\n\nDeletePaymentModal.modal = modal;\n\nexport default DeletePaymentModal;\n","import React, { useState } from \"react\";\nimport { Button, Modal as BSModal } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { components } from \"react-select\";\nimport apiService from \"../../services/apiService\";\nimport Autocomplete from \"../common/Autocomplete\";\nimport Modal from \"../common/modal/index\";\nimport { loadEntities } from \"./actions\";\nimport { closeModal, setSearchParams } from \"./slice\";\n\nconst modal = \"SearchByInvoiceModal\";\n\n/**\n * Custom options menu to display the invoice's\n * supplier name on top of the invoice description.\n */\nconst Option = (props) => {\n  return (\n    <>\n      <p className=\"text-muted small mb-0 pl-2\">\n        <small>{props.data.supplierName}</small>\n      </p>\n      <components.Option {...props} />\n    </>\n  );\n};\n\nconst SearchByInvoiceModal = () => {\n  const state = useSelector((state) => state.payments.modals[modal]);\n  const dispatch = useDispatch();\n  const [invoice, setInvoice] = useState();\n\n  const { isOpen } = state || {};\n\n  // Update result and close the modal.\n  const handleConfirm = async () => {\n    dispatch(setSearchParams({ invoice, supplier: undefined }));\n    dispatch(loadEntities());\n    dispatch(closeModal(modal));\n  };\n\n  //Options loader.\n  const loadOptions = async (inputValue, callback) => {\n    try {\n      const { _embedded } = await apiService.searchByMethod(\n        \"invoices\",\n        \"findByDescriptionContainingIgnoreCase\",\n        { description: inputValue }\n      );\n      callback(_embedded.invoices);\n    } catch (error) {\n      alert(\"Errore: impossibile caricare opzioni.\");\n      console.error(\"Error while loading options.\", error);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={() => dispatch(closeModal(modal))}>\n      <BSModal.Body>\n        <Autocomplete\n          components={{ Option }}\n          getOptionLabel={(invoice) => invoice.description}\n          getOptionValue={(invoice) => invoice.id}\n          value={invoice}\n          loadOptions={loadOptions}\n          onChange={setInvoice}\n        />\n      </BSModal.Body>\n\n      <BSModal.Footer>\n        <Button variant=\"light\" onClick={() => dispatch(closeModal(modal))}>\n          Annulla\n        </Button>\n        <Button variant=\"primary\" type=\"submit\" onClick={handleConfirm}>\n          Confirma\n        </Button>\n      </BSModal.Footer>\n    </Modal>\n  );\n};\n\nSearchByInvoiceModal.modal = modal;\n\nexport default SearchByInvoiceModal;\n","import React, { useState } from \"react\";\nimport { Button, Modal as BSModal } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport apiService from \"../../services/apiService\";\nimport Autocomplete from \"../common/Autocomplete\";\nimport Modal from \"../common/modal/index\";\nimport { loadEntities } from './actions';\nimport { closeModal, setSearchParams } from \"./slice\";\n\nconst modal = \"SearchByPeriodModal\";\n\nconst SearchByPeriodModal = () => {\n  const state = useSelector((state) => state.payments.modals[modal]);\n  const dispatch = useDispatch();\n  const [period, setPeriod] = useState();\n\n  const { isOpen } = state || {};\n\n  // Update result and close the modal.\n  const handleConfirm = async () => {\n    dispatch(setSearchParams({ period }));\n    dispatch(loadEntities());\n    dispatch(closeModal(modal));\n  };\n\n  //Options loader.\n  const loadOptions = async (inputValue, callback) => {\n    try {\n      const { _embedded } = await apiService.searchByMethod(\n        \"periods\",\n        \"findByNameContainingIgnoreCase\",\n        { name: inputValue }\n      );\n      callback(_embedded.periods);\n    } catch (error) {\n      alert(\"Errore: impossibile caricare opzioni.\");\n      console.error(\"Error while loading options.\", error);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={() => dispatch(closeModal(modal))}>\n      <BSModal.Body>\n        <Autocomplete\n          getOptionLabel={(period) => period.name}\n          getOptionValue={(period) => period.id}\n          value={period}\n          loadOptions={loadOptions}\n          onChange={setPeriod}\n        />\n      </BSModal.Body>\n\n      <BSModal.Footer>\n        <Button variant=\"light\" onClick={() => dispatch(closeModal(modal))}>\n          Annulla\n        </Button>\n        <Button variant=\"primary\" type=\"submit\" onClick={handleConfirm}>\n          Confirma\n        </Button>\n      </BSModal.Footer>\n    </Modal>\n  );\n};\n\nSearchByPeriodModal.modal = modal;\n\nexport default SearchByPeriodModal;\n","import React, { useState } from \"react\";\nimport { Button, Modal as BSModal } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadEntities } from \"./actions\";\nimport { closeModal, setSearchParams } from \"./slice\";\nimport apiService from \"../../services/apiService\";\nimport Autocomplete from \"../common/Autocomplete\";\nimport Modal from \"../common/modal/index\";\n\nconst modal = \"SearchBySupplierModal\";\n\nconst SearchBySupplierModal = () => {\n  const state = useSelector((state) => state.payments.modals[modal]);\n  const dispatch = useDispatch();\n  const [supplier, setSupplier] = useState();\n\n  const { isOpen } = state || {};\n\n  // Update result and close the modal.\n  const handleConfirm = async () => {\n    dispatch(setSearchParams({ supplier, invoice: undefined }));\n    dispatch(loadEntities());\n    dispatch(closeModal(modal));\n  };\n\n  //Options loader.\n  const loadOptions = async (inputValue, callback) => {\n    try {\n      const { _embedded } = await apiService.searchByMethod(\n        \"suppliers\",\n        \"findByNameContainingIgnoreCase\",\n        { name: inputValue }\n      );\n      callback(_embedded.suppliers);\n    } catch (error) {\n      alert(\"Errore: impossibile caricare opzioni.\");\n      console.error(\"Error while loading options.\", error);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={() => dispatch(closeModal(modal))}>\n      <BSModal.Body>\n        <Autocomplete\n          getOptionLabel={(supplier) => supplier.name}\n          getOptionValue={(supplier) => supplier.id}\n          value={supplier}\n          loadOptions={loadOptions}\n          onChange={setSupplier}\n        />\n      </BSModal.Body>\n\n      <BSModal.Footer>\n        <Button variant=\"light\" onClick={() => dispatch(closeModal(modal))}>\n          Annulla\n        </Button>\n        <Button variant=\"primary\" type=\"submit\" onClick={handleConfirm}>\n          Confirma\n        </Button>\n      </BSModal.Footer>\n    </Modal>\n  );\n};\n\nSearchBySupplierModal.modal = modal;\n\nexport default SearchBySupplierModal;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Icon from \"../components/common/Icon\";\nimport Pagination from \"../components/common/Pagination\";\nimport SearchByButton from \"../components/common/SearchByButton\";\nimport Table from \"../components/common/table/Table\";\nimport View from \"../components/common/View\";\nimport { loadEntities, loadMore } from \"../components/payments/actions\";\nimport DeletePaymentModal from \"../components/payments/DeletePaymentModal\";\nimport SearchByInvoiceModal from \"../components/payments/SearchByInvoiceModal\";\nimport SearchByPeriodModal from \"../components/payments/SearchByPeriodModal\";\nimport SearchBySupplierModal from \"../components/payments/SearchBySupplierModal\";\nimport { openModal } from \"../components/payments/slice\";\nimport UpsertPaymentModal from \"../components/payments/UpsertPaymentModal\";\nimport schema from \"../settings/schemas/payments\";\n\nconst Payments = () => {\n  const state = useSelector((state) => state.payments);\n  const dispatch = useDispatch();\n\n  /**\n   * Initial fetch\n   */\n  useEffect(() => void dispatch(loadEntities()), [dispatch]);\n\n  const handleUpdate = (payment) =>\n    dispatch(\n      openModal({ modal: UpsertPaymentModal.modal, props: { payment } })\n    );\n\n  const handleRemove = (payment) =>\n    dispatch(\n      openModal({ modal: DeletePaymentModal.modal, props: { payment } })\n    );\n\n  // Table row actions\n  const actions = [\n    { label: <Icon icon=\"edit\" />, onClick: handleUpdate },\n    {\n      label: <Icon icon=\"trash-alt\" />,\n      onClick: handleRemove,\n    },\n  ];\n\n  /**\n   * UI\n   */\n  return (\n    <View privateRoute>\n      <div className=\"h-100 px-3\" style={{ overflowY: \"auto\" }}>\n        <div className=\"my-3\">\n          <SearchByButton\n            input={state.search?.period}\n            onClick={() =>\n              dispatch(openModal({ modal: SearchByPeriodModal.modal }))\n            }\n          >\n            {state.search?.period?.name || \"Seleiona periodo\"}\n          </SearchByButton>\n          <SearchByButton\n            input={state.search?.supplier}\n            onClick={() =>\n              dispatch(openModal({ modal: SearchBySupplierModal.modal }))\n            }\n          >\n            {state.search?.supplier?.name || \"Seleziona fornitore\"}\n          </SearchByButton>\n          <SearchByButton\n            input={state.search?.invoice}\n            onClick={() =>\n              dispatch(openModal({ modal: SearchByInvoiceModal.modal }))\n            }\n          >\n            {state.search?.invoice?.description || \"Seleziona fattura\"}\n          </SearchByButton>\n        </div>\n        <Table\n          schema={schema}\n          ids={state.ids}\n          entities={state.entities}\n          page={state.page}\n          isLoading={state.isLoading}\n          actions={actions}\n        />\n        <Pagination\n          page={state.page}\n          isLoading={state.isLoading}\n          onLoadMore={() => dispatch(loadMore())}\n        />\n        <DeletePaymentModal />\n        <SearchByPeriodModal />\n        <SearchBySupplierModal />\n        <SearchByInvoiceModal />\n      </div>\n    </View>\n  );\n};\n\nexport default Payments;\n"],"sourceRoot":""}