{"version":3,"sources":["webpack://books/./src/components/common/SearchByButton.jsx","webpack://books/./src/components/summaries/SearchByPeriodModal.jsx","webpack://books/./src/pages/summary.jsx"],"names":["input","onClick","children","variant","className","classnames","modal","SearchByPeriodModal","state","useSelector","summaries","modals","dispatch","useDispatch","useState","period","setPeriod","isOpen","handleConfirm","setSearchParams","loadEntities","closeModal","loadOptions","inputValue","callback","apiService","name","_embedded","periods","alert","console","error","onClose","Autocomplete","getOptionLabel","getOptionValue","id","value","onChange","Button","type","useEffect","View","privateRoute","style","overflowY","SearchByButton","search","openModal","Table","schema","ids","entities","page","isLoading","Pagination","onLoadMore","loadMore"],"mappings":"6IAcA,IAVuB,SAAC,GAAD,IAAGA,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,SAAnB,OACrB,gBAAC,IAAD,CACEC,QAASH,EAAQ,gBAAkB,QACnCI,UAAWC,IAAW,CAAC,OAAQ,CAAE,YAAaL,KAC9CC,QAAS,kBAAMA,MAEdC,K,kPCDCI,EAAQ,sBAERC,EAAsB,WAC1B,IAAMC,GAAQC,SAAY,SAACD,GAAD,OAAWA,EAAME,UAAUC,OAAhB,uBAC/BC,GAAWC,UAFe,GAGJC,gBAArBC,EAHyB,KAGjBC,EAHiB,KAKxBC,GAAWT,GAAS,IAApBS,OAGFC,EAAa,mCAAG,8EACpBN,GAASO,QAAgB,CAAEJ,YAC3BH,GAASQ,WACTR,GAASS,QAAWf,IAHA,2CAAH,qDAObgB,EAAW,mCAAG,WAAOC,EAAYC,GAAnB,kGAEYC,mBAC1B,UACA,iCACA,CAAEC,KAAMH,IALM,gBAERI,EAFQ,EAERA,UAKRH,EAASG,EAAUC,SAPH,gDAShBC,MAAM,yCACNC,QAAQC,MAAM,+BAAd,MAVgB,yDAAH,wDAcjB,OACE,gBAAC,IAAD,CAAOd,OAAQA,EAAQe,QAAS,kBAAMpB,GAASS,QAAWf,MACxD,gBAAC,SAAD,KACE,gBAAC2B,EAAA,EAAD,CACEC,eAAgB,SAACnB,GAAD,OAAYA,EAAOW,MACnCS,eAAgB,SAACpB,GAAD,OAAYA,EAAOqB,IACnCC,MAAOtB,EACPO,YAAaA,EACbgB,SAAUtB,KAId,gBAAC,WAAD,KACE,gBAACuB,EAAA,EAAD,CAAQpC,QAAQ,QAAQF,QAAS,kBAAMW,GAASS,QAAWf,MAA3D,WAGA,gBAACiC,EAAA,EAAD,CAAQpC,QAAQ,UAAUqC,KAAK,SAASvC,QAASiB,GAAjD,eAQRX,EAAoBD,MAAQA,EAE5B,Q,8iBCZA,EA3CkB,WAAO,IAAD,MAChBE,GAAQC,SAAY,SAACD,GAAD,OAAWA,EAAME,aACrCE,GAAWC,UAUjB,OALA4B,gBAAU,WAAW7B,GAASQ,aAAiB,CAACR,IAM9C,gBAAC8B,EAAA,EAAD,CAAMC,cAAY,GAChB,uBAAKvC,UAAU,aAAawC,MAAO,CAAEC,UAAW,SAC9C,uBAAKzC,UAAU,QACb,gBAAC0C,EAAA,EAAD,CACE9C,MAAK,UAAEQ,EAAMuC,cAAR,aAAE,EAAchC,OACrBd,QAAS,kBACPW,GAASoC,QAAU,CAAE1C,MAAOC,cAG7B,UAAAC,EAAMuC,cAAN,mBAAchC,cAAd,eAAsBW,OAAQ,qBAGnC,gBAACuB,EAAA,EAAD,CACEC,OAAQA,EACRC,IAAK3C,EAAM2C,IACXC,SAAU5C,EAAM4C,SAChBC,KAAM7C,EAAM6C,KACZC,UAAW9C,EAAM8C,YAEnB,gBAACC,EAAA,EAAD,CACEF,KAAM7C,EAAM6C,KACZC,UAAW9C,EAAM8C,UACjBE,WAAY,kBAAM5C,GAAS6C,eAG/B,gBAAC,EAAD","file":"component---src-pages-summary-jsx.bc89a953ecae8302a510.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport classnames from \"classnames\";\n\nconst SearchByButton = ({ input, onClick, children }) => (\n  <Button\n    variant={input ? \"primary-light\" : \"light\"}\n    className={classnames([\"mr-2\", { \"no-print\": !input }])}\n    onClick={() => onClick()}\n  >\n    {children}\n  </Button>\n);\n\nexport default SearchByButton;\n","import React, { useState } from \"react\";\nimport { Button, Modal as BSModal } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadEntities } from './actions';\nimport { closeModal, setSearchParams } from \"./slice\";\nimport apiService from \"../../services/apiService\";\nimport Autocomplete from \"../common/Autocomplete\";\nimport Modal from \"../common/modal/index\";\n\nconst modal = \"SearchByPeriodModal\";\n\nconst SearchByPeriodModal = () => {\n  const state = useSelector((state) => state.summaries.modals[modal]);\n  const dispatch = useDispatch();\n  const [period, setPeriod] = useState();\n\n  const { isOpen } = state || {};\n\n  // Update result and close the modal.\n  const handleConfirm = async () => {\n    dispatch(setSearchParams({ period }));\n    dispatch(loadEntities());\n    dispatch(closeModal(modal));\n  };\n\n  //Options loader.\n  const loadOptions = async (inputValue, callback) => {\n    try {\n      const { _embedded } = await apiService.searchByMethod(\n        \"periods\",\n        \"findByNameContainingIgnoreCase\",\n        { name: inputValue }\n      );\n      callback(_embedded.periods);\n    } catch (error) {\n      alert(\"Errore: impossibile caricare opzioni.\");\n      console.error(\"Error while loading options.\", error);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={() => dispatch(closeModal(modal))}>\n      <BSModal.Body>\n        <Autocomplete\n          getOptionLabel={(period) => period.name}\n          getOptionValue={(period) => period.id}\n          value={period}\n          loadOptions={loadOptions}\n          onChange={setPeriod}\n        />\n      </BSModal.Body>\n\n      <BSModal.Footer>\n        <Button variant=\"light\" onClick={() => dispatch(closeModal(modal))}>\n          Annulla\n        </Button>\n        <Button variant=\"primary\" type=\"submit\" onClick={handleConfirm}>\n          Confirma\n        </Button>\n      </BSModal.Footer>\n    </Modal>\n  );\n};\n\nSearchByPeriodModal.modal = modal;\n\nexport default SearchByPeriodModal;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Pagination from \"../components/common/Pagination\";\nimport SearchByButton from '../components/common/SearchByButton';\nimport Table from \"../components/common/table/Table\";\nimport View from \"../components/common/View\";\nimport { loadEntities, loadMore } from \"../components/summaries/actions\";\nimport SearchByPeriodModal from '../components/summaries/SearchByPeriodModal';\nimport { openModal } from \"../components/summaries/slice\";\nimport schema from \"../settings/schemas/summaries\";\n\nconst Summaries = () => {\n  const state = useSelector((state) => state.summaries);\n  const dispatch = useDispatch();\n\n  /**\n   * Initial fetch\n   */\n  useEffect(() => void dispatch(loadEntities()), [dispatch]);\n\n  /**\n   * UI\n   */\n  return (\n    <View privateRoute>\n      <div className=\"h-100 px-3\" style={{ overflowY: \"auto\" }}>\n        <div className=\"my-3\">\n          <SearchByButton\n            input={state.search?.period}\n            onClick={() =>\n              dispatch(openModal({ modal: SearchByPeriodModal.modal }))\n            }\n          >\n            {state.search?.period?.name || \"Seleiona periodo\"}\n          </SearchByButton>\n        </div>\n        <Table\n          schema={schema}\n          ids={state.ids}\n          entities={state.entities}\n          page={state.page}\n          isLoading={state.isLoading}\n        />\n        <Pagination\n          page={state.page}\n          isLoading={state.isLoading}\n          onLoadMore={() => dispatch(loadMore())}\n        />\n      </div>\n      <SearchByPeriodModal />\n    </View>\n  );\n};\n\nexport default Summaries;\n"],"sourceRoot":""}